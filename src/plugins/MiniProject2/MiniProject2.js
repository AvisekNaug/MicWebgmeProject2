/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Thu Oct 20 2016 09:09:09 GMT-0500 (Eastern Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of MiniProject2.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin MiniProject2.
     * @constructor
     */
    var MiniProject2 = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    MiniProject2.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    MiniProject2.prototype = Object.create(PluginBase.prototype);
    MiniProject2.prototype.constructor = MiniProject2;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    MiniProject2.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject;


        // Using the logger.
        //self.logger.debug('This is a debug message.');
        //self.logger.info('This is an info message.');
        //self.logger.warn('This is a warning message.');
        //self.logger.error('This is an error message.');

        // Using the coreAPI to make changes.

        nodeObject = self.activeNode;

        //self.core.setAttribute(nodeObject, 'name', 'My new obj');
        //self.core.setRegistry(nodeObject, 'position', {x: 70, y: 70});


        // This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
        self.tree = {};
        self.metaNodeInfo = [];
        var artifact;
        self.loadNodeMap(self.rootNode)
            .then(function (nodes) {
                self.tree = self.treeStructure(self.rootNode, nodes);
                artifact = self.blobClient.createArtifact('project-data');
                return artifact.addFiles({
                    'tree.json': JSON.stringify(self.tree, null, 4),
                    'meta.json': JSON.stringify(self.metaNodeInfo, null, 4)
                });
            })
            .then(function (fileHash) {
                self.result.addArtifact(fileHash);
                return artifact.save();
            })
            .then(function (artifactHash) {
                self.result.addArtifact(artifactHash);
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                // Result success is false at invocation.
                self.logger.error(err.stack);
                callback(err, self.result);
            });

    };
	
	MiniProject2.prototype.loadNodeMap = function (node) {
        var self = this;
        return self.core.loadSubTree(node)
            .then(function (nodeArr) {
                var nodes = {},
                    i;
                for (i = 0; i < nodeArr.length; i += 1) {
                    nodes[self.core.getPath(nodeArr[i])] = nodeArr[i];
                }

                return nodes;
            });
    };
	
	MiniProject2.prototype.treeStructure = function (root, nodes) {
        var self = this,
            tree = {},
			attributeNames,
            childrenPaths,
            metaNode,
            pointerNames,
            pointerPath,
            metaBase,
			childNode,
            i;
			
		attributeNames = self.core.getAttributeNames(root);
        for (i = 0; i < attributeNames.length; i += 1) {
            tree[attributeNames[i]] = self.core.getAttribute(root, attributeNames[i]);
        }
        childrenPaths = self.core.getChildrenPaths(root);
        if (root !== self.rootNode) {
            metaNode = self.getMetaType(root);
			tree.isMeta = root === metaNode;
            tree.metaType = self.core.getAttribute(metaNode, 'name');
            if (root === metaNode) {
                metaBase = self.core.getBase(root);
                self.metaNodeInfo.push({
                    name: self.core.getAttribute(root, 'name'),
                    path: self.core.getPath(root),
                    nbrOfChildren: childrenPaths.length,
                    base: metaBase ? self.core.getAttribute(metaBase, 'name') : null
                });
            }
        }
		
        pointerNames = self.core.getPointerNames(root);
        for (i = 0; i < pointerNames.length; i += 1) {
            pointerPath = self.core.getPointerPath(root, pointerNames[i]);
            if (pointerPath)
                tree[pointerNames[i]] = self.core.getAttribute(nodes[pointerPath], 'name');
        }

        tree.children = {};
        for (i = 0; i < childrenPaths.length; i += 1) {
            childNode = nodes[childrenPaths[i]];
            tree.children[self.core.getRelid(childNode)] = self.treeStructure(childNode, nodes);
        }

        return tree;
    };
	
    return MiniProject2;
});
